# -*- coding: utf-8 -*-
"""blinkit analysis.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1opZpUAvcWhGIhOo_o1dlRUstS-JRdccd

# **Data Analysis Python Project - Blinkit Analysis**

import Libraries
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""import raw data in excel"""

path="/content/Blinkit DS.xlsx"
blinkit=pd.read_excel(path)
blinkit.head(25)

blinkit.shape

blinkit.columns

blinkit.dtypes

blinkit.info()

blinkit.describe()

blinkit.isnull().sum()

print(blinkit['Item Fat Content'].unique())

blinkit['Item Fat Content']=blinkit['Item Fat Content'].replace({'low fat':'Low Fat'})

print(blinkit['Item Fat Content'].unique())

"""**Business Requirments**"""

total_sales = blinkit['Sales'].sum()

avg_sales = blinkit['Sales'].mean()

max_sales = blinkit['Sales'].max()

count_sales = blinkit['Sales'].count()

min_sales = blinkit['Sales'].min()

avg_rating = blinkit['Rating'].mean()

max_rating = blinkit['Rating'].max()

min_rating = blinkit['Rating'].min()

print(f"Total Sales: {total_sales:.2f}")
print(f'Average Sales: {avg_sales:.2f}')
print(f'Maximum Sales: {max_sales:.2f}')
print(f'Minimum Sales: {min_sales:.2f}')
print(f'Average Rating: {avg_rating:.2f}')
print(f'Maximum Rating: {max_rating}')
print(f'Minimum Rating: {min_rating}')

"""# **Chart Requirments **

total sales by fat content
"""

sales_by_fat_content = blinkit.groupby('Item Fat Content')['Sales'].sum()

plt.figure(figsize=(8, 6))
plt.pie(sales_by_fat_content, labels=sales_by_fat_content.index, autopct='%1.1f%%', startangle=90)
plt.title('Total Sales by Fat Content')
plt.axis('equal')
plt.show()

"""Total sales by item type"""

sales_by_item_type = blinkit.groupby('Item Type')['Sales'].sum().sort_values(ascending=False)

plt.figure(figsize=(8, 6))
bar=plt.bar(sales_by_item_type.index, sales_by_item_type.values,color='red')
plt.xlabel('Item Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Item Type')
plt.xticks(rotation=90)

for bar in bar:
  plt.text(bar.get_x() + bar.get_width() / 2, bar.get_height(),
           f'{bar.get_height():.2f}', ha='center', va='bottom',fontsize=5)
  plt.tight_layout()
plt.show()

"""Fat content by outlet for total sales"""

# Group and unstack
grouped = blinkit.groupby(['Outlet Location Type','Item Fat Content'])['Sales'].sum().unstack()


grouped = grouped[['Regular','Low Fat']]


# Plot
ax = grouped.plot(kind='bar', figsize=(8,5), title='Outlet Tier by Item Fat Content')
plt.xlabel('Outlet Location Type')
plt.ylabel('Total Sales')
plt.legend(title='Item Fat Content')
plt.tight_layout()
plt.show()

"""Total sales by outlet establishment"""

# Group sales by year
sales_by_year = blinkit.groupby('Outlet Establishment Year')['Sales'].sum().sort_index()

# Create figure
plt.figure(figsize=(8,6))
plt.plot(sales_by_year.index, sales_by_year.values, marker='o', linestyle='-', color='b')

plt.xlabel('Outlet Establishment Year')
plt.ylabel('Total Sales')
plt.title('Total Sales by Outlet Establishment Year')

# Add labels on points
for x, y in zip(sales_by_year.index, sales_by_year.values):
    plt.text(x, y, f'{y:.2f}', ha='center', va='bottom', fontsize=8)

plt.tight_layout()
plt.show()

"""sales by outlet size"""

sales_by_size = blinkit.groupby('Outlet Size')['Sales'].sum()

plt.figure(figsize=(4,4))
plt.pie(sales_by_size, labels=sales_by_size.index, autopct='%1.1f%%', startangle=90)
plt.title('Total Sales by Outlet Size')
plt.axis('equal')
plt.tight_layout()
plt.show()

"""sales by outlet location"""

sales_by_location = blinkit.groupby('Outlet Location Type')['Sales'].sum().reset_index()
sales_by_location = sales_by_location.sort_values(by='Sales', ascending=False)

plt.figure(figsize=(8, 4))
ax = sns.barplot(y='Outlet Location Type', x='Sales', data=sales_by_location, palette='viridis')
plt.xlabel('Outlet Location Type')
plt.ylabel('Total Sales')
plt.title('Total Sales by Outlet Location Type')
plt.tight_layout()
plt.show()